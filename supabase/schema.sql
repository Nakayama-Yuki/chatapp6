-- Need to create the following tables:
-- 1. rooms - チャットルームのリスト
-- 2. rooms_users - ルームとユーザーの関連付け
-- 3. messages - チャットメッセージの保存

-- テーブル作成
CREATE TABLE IF NOT EXISTS public.rooms (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  topic TEXT NOT NULL UNIQUE,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;

-- すでにprofilesテーブルが存在するか確認が必要
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID NOT NULL REFERENCES auth.users ON DELETE CASCADE,
  email TEXT NOT NULL,
  avatar_url TEXT,
  PRIMARY KEY (id)
);
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

CREATE TABLE IF NOT EXISTS public.rooms_users (
  user_id UUID REFERENCES auth.users (id),
  room_topic TEXT REFERENCES public.rooms (topic),
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, room_topic)
);
ALTER TABLE public.rooms_users ENABLE ROW LEVEL SECURITY;

CREATE TABLE IF NOT EXISTS public.messages (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  room_topic TEXT REFERENCES public.rooms (topic),
  user_id UUID REFERENCES auth.users (id),
  content TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;

-- RLS ポリシー設定
-- ルーム閲覧ポリシー
CREATE POLICY "authenticated can read rooms"
ON "public"."rooms"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

-- ルーム作成ポリシー
CREATE POLICY "authenticated can add rooms"
ON "public"."rooms"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

-- rooms_users 閲覧ポリシー
CREATE POLICY "authenticated can read rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

-- rooms_users 作成ポリシー
CREATE POLICY "authenticated can add rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

-- メッセージ閲覧ポリシー - 自分が参加しているルームのメッセージのみ閲覧可能
CREATE POLICY "can read messages from joined rooms"
ON "public"."messages"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE rooms_users.user_id = auth.uid()
    AND rooms_users.room_topic = messages.room_topic
  )
);

-- メッセージ作成ポリシー - 自分が参加しているルームにのみメッセージを送信可能
CREATE POLICY "can insert messages to joined rooms"
ON "public"."messages"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE rooms_users.user_id = auth.uid()
    AND rooms_users.room_topic = messages.room_topic
  )
);

-- リアルタイム認証ポリシー
CREATE POLICY "authenticated can read broadcast and presence state"
ON "realtime"."messages"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = auth.uid()
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);

CREATE POLICY "authenticated can send broadcast and track presence"
ON "realtime"."messages"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = auth.uid()
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);

-- 新規ユーザー作成時にprofilesテーブルに自動で追加するトリガー
CREATE OR REPLACE FUNCTION insert_user() RETURNS TRIGGER AS
$$
  BEGIN
    INSERT INTO public.profiles (id, email) VALUES (NEW.id, NEW.email); RETURN NEW;
  END;
$$ LANGUAGE plpgsql
   SECURITY DEFINER
   SET search_path = public;

CREATE OR REPLACE TRIGGER "on_new_auth_create_profile"
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE FUNCTION insert_user();

-- 実行権限の設定
GRANT EXECUTE ON FUNCTION insert_user () TO supabase_auth_admin;
GRANT INSERT ON TABLE public.profiles TO supabase_auth_admin;
